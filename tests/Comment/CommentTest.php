<?php

use App\Comment;
use App\Post;
use Illuminate\Support\Facades\Request;

class CommentTest extends \Tests\TestCase{

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        \Illuminate\Support\Facades\Artisan::call('migrate');
    }

    public function testGetComment()
    {
        $post = factory(Post::class)->create();
        $comment = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post']);
        $comment1 = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post']);
        $comment2 = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post', 'reply' => $comment1->id]);

        $response = $this->call('GET', '/api/comments', ['id' => $post->id, 'type' => 'Post']);
        $comments = json_decode($response->getContent());
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals(2, count($comments));
        $this->assertSame($comment->id, $comments[1]->id);
        $this->assertSame($comment1->id, $comments[0]->id);
        $this->assertSame(0, $comments[0]->reply);
        $this->assertSame(1, count($comments[0]->replies));
    }

    public function testFieldJson()
    {
        $post = factory(Post::class)->create();
        $comment = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post']);
        $reply = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post', 'reply' => $comment->id]);

        $response = $this->call('GET', '/api/comments', ['id' => $post->id, 'type' => 'Post']);
        $comments = json_decode($response->getContent());

        $this->assertObjectNotHasAttribute('email', $comments[0]);
        $this->assertObjectNotHasAttribute('ip', $comments[0]);

        $this->assertObjectHasAttribute('email_md5', $comments[0]);
        $this->assertObjectHasAttribute('ip_md5', $comments[0]);
        $this->assertEquals(md5($comment->ip), $comments[0]->ip_md5);
        $this->assertObjectNotHasAttribute('email', $comments[0]->replies[0]);
        $this->assertObjectNotHasAttribute('ip', $comments[0]->replies[0]);
    }

    public function testPostComment()
    {
        $post = factory(Post::class)->create();
        $comment = factory(Comment::class)->make(['comment_id' => $post->id, 'comment_type' => 'Post']);
        $response = $this->call('POST', '/api/comments', $comment->getAttributes());

        $json = json_decode($response->getContent());

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals(1, Comment::count());
        $this->assertEquals(md5(Request::ip()), $json->ip_md5);
    }

    public function testPostCommentWithFakeContent()
    {
        $comment = factory(Comment::class)->make(['comment_id' => 7, 'comment_type' => 'Post']);
        $response = $this->call('POST', '/api/comments', $comment->getAttributes());

        $this->assertEquals(422, $response->getStatusCode());
        $this->assertEquals(0, Comment::count());
    }

    public function testWithFakeEmail()
    {
        $post = factory(Post::class)->create();
        $comment = factory(Comment::class)->make(['comment_id' => $post->id, 'comment_type' => 'Post', 'email' => 'gjackson@']);
        $response = $this->call('POST', '/api/comments', $comment->getAttributes());

        $json = json_decode($response->getContent());

        $this->assertEquals(422, $response->getStatusCode());
        $this->assertEquals(0, Comment::count());
        $this->assertObjectNotHasAttribute('email', $json);
    }
    public function testPostCommentWithFalseReply()
    {
        $post = factory(Post::class)->create();
        $comment = factory(Comment::class)->make(['comment_id' => $post->id, 'comment_type' => 'Post', 'reply' => 4]);
        $response = $this->call('POST', '/api/comments', $comment->getAttributes());

        $json = json_decode($response->getContent());

        $this->assertEquals(422, $response->getStatusCode());
        $this->assertEquals(0, Comment::count());
        $this->assertObjectNotHasAttribute('reply', $json);
    }

    public function testReplyOnReply()
    {
        $post = factory(Post::class)->create();
        $comment = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post']);
        $reply = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post', 'reply' => $comment->id]);
        $reply2 = factory(Comment::class)->make(['comment_id' => $post->id, 'comment_type' => 'Post', 'reply' => $reply->id]);

        $response = $this->call('POST', '/api/comments', $reply2->getAttributes());

        $json = json_decode($response->getContent());

        $this->assertEquals(422, $response->getStatusCode());
        $this->assertEquals(2, Comment::count());
        $this->assertObjectNotHasAttribute('reply', $json);
    }

    public function testDeleteComment()
    {
        $post = factory(Post::class)->create();
        $ip = Request::ip();
        $comment = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post', 'ip' => $ip]);
        $response = $this->call('DELETE', '/api/comments/' . $comment->id);

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals(0, Comment::count());
    }

    public function testDeleteCommentWithoutIp()
    {
        $post = factory(Post::class)->create();
        $ip = Request::ip();
        $comment = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post']);
        $response = $this->call('DELETE', '/api/comments/' . $comment->id);

        $this->assertEquals(403, $response->getStatusCode());
        $this->assertEquals(1, Comment::count());
    }

    public function testDeleteOnCascade()
    {
        $post = factory(Post::class)->create();
        $ip = Request::ip();
        $comment = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post', 'ip' => $ip]);
        $reply = factory(Comment::class)->create(['comment_id' => $post->id, 'comment_type' => 'Post', 'reply' => $comment->id]);

        $response = $this->call('DELETE', '/api/comments/' . $comment->id);

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals(0, Comment::count());
    }

}
